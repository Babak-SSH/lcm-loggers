"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import robot_types.motor_command_t

class motor_commands_t(object):
    __slots__ = ["n", "commands"]

    __typenames__ = ["int32_t", "robot_types.motor_command_t"]

    __dimensions__ = [None, ["n"]]

    def __init__(self):
        self.n = 0
        self.commands = []

    def encode(self):
        buf = BytesIO()
        buf.write(motor_commands_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.n))
        for i0 in range(self.n):
            assert self.commands[i0]._get_packed_fingerprint() == robot_types.motor_command_t._get_packed_fingerprint()
            self.commands[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motor_commands_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motor_commands_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motor_commands_t()
        self.n = struct.unpack(">i", buf.read(4))[0]
        self.commands = []
        for i0 in range(self.n):
            self.commands.append(robot_types.motor_command_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if motor_commands_t in parents: return 0
        newparents = parents + [motor_commands_t]
        tmphash = (0x260e80d61295a9c0+ robot_types.motor_command_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motor_commands_t._packed_fingerprint is None:
            motor_commands_t._packed_fingerprint = struct.pack(">Q", motor_commands_t._get_hash_recursive([]))
        return motor_commands_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

